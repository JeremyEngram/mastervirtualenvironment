#!/bin/bash

# Function to check if a command succeeded
check_command() {
  if [ $? -ne 0 ]; then
    echo "Error: $1"
    exit 1
  fi
}

# Update package list and install required packages
sudo apt update
check_command "Updating package list failed"

sudo apt install -y python3-venv python3-pip
check_command "Installing python3-venv and python3-pip failed"

# Prompt the user for the project directory and virtual environment name
read -p "Enter the project directory (absolute path): " project_dir
read -p "Enter the virtual environment name: " venv_name

# Navigate to the project directory
if [ -d "$project_dir" ]; then
  cd "$project_dir"
else
  echo "Directory does not exist. Please create the directory first."
  exit 1
fi

# Check if the virtual environment already exists
if [ -d "$venv_name" ]; then
  echo "Virtual environment '$venv_name' already exists. Removing it."
  rm -rf "$venv_name"
  check_command "Removing existing virtual environment failed"
fi

# Create the virtual environment
python3 -m venv "$venv_name"
check_command "Creating virtual environment failed"

# Confirm creation
echo "Virtual environment '$venv_name' created."

# Activate the virtual environment
source "$venv_name/bin/activate"
check_command "Activating virtual environment failed"

# Update pip to the latest version
pip install --upgrade pip
check_command "Updating pip failed"

# Install necessary packages (optional)
read -p "Do you want to install any packages? (y/n): " install_packages
if [ "$install_packages" == "y" ]; then
  while true; do
    read -p "Enter the package names (space-separated): " packages
    pip install $packages
    if [ $? -ne 0 ]; then
      echo "Some packages failed to install. Do you want to try again? (y/n)"
      read retry
      if [ "$retry" != "y" ]; then
        break
      fi
    else
      break
    fi
  done
fi

# Handle package conflicts
while true; do
  read -p "Do you need to update or downgrade any packages? (y/n): " manage_packages
  if [ "$manage_packages" == "y" ]; then
    read -p "Enter the package names and versions (e.g., package==version): " package_versions
    pip install $package_versions
    check_command "Updating or downgrading packages failed"
  else
    break
  fi
done

# Deactivate the virtual environment
deactivate
check_command "Deactivating virtual environment failed"

# Confirm deactivation
echo "Virtual environment '$venv_name' deactivated."

# Exit the script
exit 0
